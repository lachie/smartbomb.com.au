-# title: I love me some source
-# slug: i-love-me-some-source
-# published_at: 2008-02-01 12:42:00
-# updated_at: 2008-09-01 18:05:39
-# archived_comments: 9


:textile
  I don't know if its because I'm nosy, or because I'm a control freak, or perhaps both, but I really do like to read the source code. It occurs to me that this is probably why I feel so at home in the open source world.
  
  As much as I like something like Cocoa, it pains me not to be able to trace problems all the way down the stack. Even java solved this problem by shipping with its own source.
  
  Proclivities aside, I really like source, and am always looking for ways to make it easier to _get at_. @cd /usr/lib/ruby/gems/1.8/gems@ gets old quick.
  
  I started with this little _cough_ "gem from Dr Nic":http://drnic.tumblr.com/post/166472. Integrating it with my shell, I could now type
  
  ---
  $ gems activerecord
  ---
  
  and up pops the activerecord gem in Textmate. So some new releases of activerecord came out, and suddenly my naive script is giving me the old version. Without looking too far into it I added gem requirement support so that I could type
  
  ---
  $ gems activerecord '>=2'
  ---
  
  and get a recent activerecord in Textmate. As good as this is, I was really after something with _less typing_ and smarter pants. Well tonight I cracked it and I thought I'd open the source:
  
  --- ruby
  #!/usr/bin/env ruby
  
  require ENV['TM_SUPPORT_PATH']+"/lib/ui"
  require 'rubygems'
  
  gems = Gem.source_index.latest_specs.collect {|spec| spec.full_name}.sort
  
  TextMate::UI.request_item(:title => 'open a gem', :items => gems) do |selected_gem|
    gem_path = Gem.source_index.specification(selected_gem).full_gem_path
    %x{open -a TextMate \#{gem_path}}
  end
  ---
  
  Honestly, that's it! Bung that in a command using Textmate's Bundle Editor and assign it a key (I gave it cmd-shift-G, as I don't regularly search backwards).
  
  !http://smartbomb.com.au/assets/2008/2/1/open_a_gem-1.jpg!
  
  Double click on one and you're golden... neat.

-throw_content(:archived_comments) do
  %h3 archived comments

  .commentsblock
    %ol.commenlist
      %li
        %cite Dr Nic says:
        %br/
        :plain
          Nice UI.<br />
          <br />
          I later integrated that pastie into a gem find_gem.<br />
          <br />
          Has two command-line apps: find_gem name, and edit_gem name; the later opening up the gem into TextMate etc.<br />
          <br />
          Also has some nice autocompletions for bash if you look in the readme, I think.
      %li.alt
        %cite cammo says:
        %br/
        :plain
          Wicked! I will be using this alot!
      %li
        %cite Marc Jeanson says:
        %br/
        :plain
          Nice work!
      %li.alt
        %cite Marc Jeanson says:
        %br/
        :plain
          Nice work!
      %li
        %cite Evan Light says:
        %br/
        :plain
          Cool.  While tiny, why not make it into a gem as well?  Or perhaps hand it off to Giles Bowkett and make it part of the utility_belt gem.  Seems appropriate for it.
      %li.alt
        %cite Evan Light says:
        %br/
        :plain
          Ok, forget what I said about utility_belt integration; it's focused on IRB enhancements.  This is a command line enhancement.
      %li
        %cite Daniel De Aguiar says:
        %br/
        :plain
          Great post. This is really helpful!
      %li.alt
        %cite Lee says:
        %br/
        :plain
          You might want to check out my little gem called gemedit, which allows gems to be opened in any editor and has command line completion.<br />
          <br />
          http://gemedit.rubyforge.org/
      %li
        %cite Dave Newman says:
        %br/
        :plain
          Sweeeeeeeeeeeeeeeeet
